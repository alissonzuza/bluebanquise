---
- name: test
  hosts: "c001,c002"

  tasks:

    # - name: fact <|> Calculate bb_nodes_profiles
    #   ansible.builtin.set_fact:
    #     bb_nodes_network_interfaces: "
    #     {%- set nodes_network_interfaces = {} -%}
    #     {%- for host in j2_hosts_range -%}
    #       {%- if hostvars[host]['network_interfaces'] is defined -%}
    #         {%- set host_node_main_resolution_address = hostvars[host]['j2_node_main_resolution_address'] | default(none, true) -%}
    #         {%- set host_current_iceberg = hostvars[host]['j2_current_iceberg'] | default(none, true) -%}
    #         {%- set host_icebergs_main_network_dict = hostvars[host]['j2_icebergs_main_network_dict'] | default(none, true) -%}
    #         {%- if hostvars[host]['bmc'] is defined -%}
    #         {%- do nodes_network_interfaces.update({host: {'network_interfaces': hostvars[host]['network_interfaces'], 'node_main_resolution_address': host_node_main_resolution_address, 'current_iceberg': host_current_iceberg, 'icebergs_main_network_dict': host_icebergs_main_network_dict, 'bmc': hostvars[host]['bmc'] }}) -%}
    #         {%- else -%}
    #         {%- do nodes_network_interfaces.update({host: {'network_interfaces': hostvars[host]['network_interfaces'], 'node_main_resolution_address': host_node_main_resolution_address, 'current_iceberg': host_current_iceberg, 'icebergs_main_network_dict': host_icebergs_main_network_dict}}) -%}
    #         {%- endif -%}
    #       {%- endif -%}
    #     {%- endfor -%}
    #     {{ nodes_network_interfaces }}"

    - name: fact <|> Calculate bb_nodes_profiles
      ansible.builtin.set_fact:
        bb_nodes: "
        {%- set nodes_network_interfaces = {} -%}
        {%- for host in j2_hosts_range -%}
          {%- do nodes_network_interfaces.update({
            host: {
              'network_interfaces': hostvars[host]['network_interfaces'] | default(none, true),
              'node_main_resolution_address': hostvars[host]['j2_node_main_resolution_address'] | default(none, true),
              'current_iceberg': hostvars[host]['j2_current_iceberg'] | default(none, true),
              'icebergs_main_network_dict': hostvars[host]['j2_icebergs_main_network_dict'] | default({}, true),
              'bmc': hostvars[host]['bmc'] | default(none, true),
              'alias': hostvars[host]['alias'] | default(none, true),
              'global_alias': hostvars[host]['alias'] | default(none, true)
            }
          }) -%}
        {%- endfor -%}
        {{ nodes_network_interfaces }}"

    - name: display value
      ansible.builtin.debug:
        msg: "{{ bb_nodes }}"


    - name: fact <|> Calculate bb_nodes_profiles
      ansible.builtin.set_fact:
        bb_nodes_profiles: "{{ j2_bb_nodes_profiles }}"
      when: bb_nodes_profiles is not defined or bb_nodes_profiles is none

    - name: fact <|> Calculate bb_equipments
      ansible.builtin.set_fact:
        bb_equipments: "{{ j2_bb_equipments }}"
      when: bb_equipments is not defined or bb_equipments is none

    - name: display value
      ansible.builtin.debug:
        msg: "{{ bb_nodes_profiles}}"

    - name: display value
      ansible.builtin.debug:
        msg: "{{ bb_equipments }}"

    - name: toto
      ansible.builtin.debug:
        msg: "{% for host, host_vars in bb_nodes_profiles.items() %}
              {% if host_vars['type'] == 'server' %}
               {{ host}} toto {{host_vars}}
              {% endif %}
              {% endfor %}"

    - name: calculate forward dict
      ansible.builtin.set_fact:
        bb_nodes_ep_forward: "
{%- set nodes_ep_forward = {} -%}
{%- for host in j2_hosts_range -%}
{%- set host_hw = (hostvars[host]['group_names'] | select('match','^'+'hw'+'_.*') | list | unique | sort | first) | default(none, true) -%}
{%- set host_os = (hostvars[host]['group_names'] | select('match','^'+'os'+'_.*') | list | unique | sort | first) | default(none, true) -%}
{%- if host_hw is not none and host_os is not none -%}
{%- set host_ep = (host_hw + '_' + host_os) -%}
{%- else -%}
{%- set host_ep = none -%}
{%- endif -%}
{%- set host_type = hostvars[host]['hw_equipment_type'] | default(none, true) -%}
{%- do nodes_ep_forward.update({host: {'hw': host_hw, 'os': host_os, 'ep': host_ep, 'type': host_type}}) -%}
{%- endfor -%}
{{ nodes_ep_forward }}
"

    - name: calculate reverse dict
      ansible.builtin.set_fact:
        bb_nodes_ep_reverse: "
{%- set nodes_ep_reverse = {} -%}
{%- for host, host_keys in bb_nodes_ep_forward.items() -%}
{%- if host_keys['hw'] is not none and host_keys['os'] is not none -%}
{%- set host_equipment = (host_keys['hw'] + '_' + host_keys['os']) -%}
{%- if host_equipment not in nodes_ep_reverse -%}
{%- do nodes_ep_reverse.update({host_equipment: []}) -%}
{%- endif -%}
{{ nodes_ep_reverse[host_equipment].append(host) }}
{%- endif -%}
{%- endfor -%}
{{ nodes_ep_reverse }}
"

    - name: calculate stuff
      ansible.builtin.set_fact:
        tyty: "coucou"
      run_once: true

    - name: display value
      ansible.builtin.debug:
        msg: "{{ inventory_hostname}} {{tyty}}"

    - name: display
      ansible.builtin.debug:
        msg: "{{bb_nodes_ep_forward}}"


    - name: display
      ansible.builtin.debug:
        msg: "{{bb_nodes_ep_reverse.keys()}}"
# {% set main_dict = { 'forward': {}, 'reverse': {} } %}
# {% for host in (j2_hosts_range | sort) -%}
# {% do main_dict['forward'].update({host: {'hw': (hostvars[host]['group_names'] | select('match','^'+'hw'+'_.*') | list | unique | sort | first) | default(none, true), 'os': (hostvars[host]['group_names'] | select('match','^'+'os'+'_.*') | list | unique | sort | first) | default(none, true)}}) %}



# {% set host_hw = (hostvars[host]['group_names'] | select('match','^'+'hw'+'_.*') | list | unique | sort | first) | default(none, true) %}
# {% set host_os = (hostvars[host]['group_names'] | select('match','^'+'os'+'_.*') | list | unique | sort | first) | default(none, true) %}
# {% set current_host_dict = {}%}
# {% if host_hw is not none %}
# {% do current_host_dict = {} %}
# {% endif %}
# {{ host }} {{host_hw}}
# {% endfor %}
# {{ main_dict }}
# {{ main_dict['forward']['c001'] }}
# "
